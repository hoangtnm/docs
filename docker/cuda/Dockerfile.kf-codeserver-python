FROM kubeflownotebookswg/codeserver-python:v1.6.1

ENV DEBIAN_FRONTEND noninteractive

USER root
ENV CUDA_VERSION 11.2
ENV NV_CUDA_REPO_URL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64
RUN curl -fsSL ${NV_CUDA_REPO_URL}/3bf863cc.pub | apt-key add - \
    && echo "deb ${NV_CUDA_REPO_URL} /" > /etc/apt/sources.list.d/cuda.list \
    && apt-get update && apt-get install -y --no-install-recommends \
    cuda-cudart-${CUDA_VERSION/./-} \
    cuda-compat-${CUDA_VERSION/./-} \
    cuda-libraries-${CUDA_VERSION/./-} \
    cuda-nvcc-${CUDA_VERSION/./-} \
    libnpp-${CUDA_VERSION/./-} \
    cuda-nvtx-${CUDA_VERSION/./-} \
    libcusparse-${CUDA_VERSION/./-} \
    libcublas-${CUDA_VERSION/./-} \
    libcudnn8=8.1*cuda${CUDA_VERSION} \
    libnccl2=2.8*cuda${CUDA_VERSION} \
    && apt-mark hold \
    libcublas-${CUDA_VERSION/./-} \
    libcudnn8 \
    libnccl2 \
    && ln -s cuda-11.2 /usr/local/cuda \
    && rm -rf /var/lib/apt/lists/*
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    ca-certificates \
    ccache \
    cmake \
    curl \
    git \
    git-lfs \
    jq \
    libcurl3-dev \
    libfreetype6-dev \
    libhdf5-serial-dev \
    libzmq3-dev \
    libjpeg-dev \
    libpng-dev \
    libopenjp2-7-dev \
    liblcms2-dev \
    libtiff-dev \
    libsndfile1 \
    ffmpeg \
    libz-dev \
    pkg-config \
    rsync \
    software-properties-common \
    sox \
    zlib1g-dev \
    wget \
    openmpi-bin \
    python3-dev \
    python3-opencv \
    screen \
    zsh \
    && rm -rf /var/lib/apt/lists/*
ARG CODESERVER_VERSION=4.8.3
# https://github.com/coder/code-server/tags
# https://coder.com/docs/code-server/latest/FAQ
RUN wget -qO /tmp/code-server.deb https://github.com/coder/code-server/releases/download/v${CODESERVER_VERSION}/code-server_${CODESERVER_VERSION}_amd64.deb \
    && dpkg -i /tmp/code-server.deb \
    && rm -f /tmp/code-server.deb
ENV EXTENSIONS_GALLERY='{"serviceUrl": "https://marketplace.visualstudio.com/_apis/public/gallery"}'
# ENV EXP_1='.extensionsGallery.serviceUrl="https://marketplace.visualstudio.com/_apis/public/gallery"'
# ENV EXP_2='.extensionsGallery.cacheUrl="https://vscode.blob.core.windows.net/gallery/index"'
# ENV EXP_3='.extensionsGallery.itemUrl="https://marketplace.visualstudio.com/items"'
# RUN jq "${EXP_1} | ${EXP_2} | ${EXP_3}" /usr/lib/code-server/lib/vscode/product.json > /tmp/product.json \
#     && mv /tmp/product.json /usr/lib/code-server/lib/vscode
USER ${NB_UID}

RUN wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | zsh || true
RUN python3 -m pip config set global.find-links \
    "https://download.pytorch.org/whl/cu116/torch_stable.html \
    https://storage.googleapis.com/jax-releases/jax_releases.html" \
    && python3 -m pip config set global.extra-index-url \
    "https://developer.download.nvidia.com/compute/redist"
RUN python3 -m pip uninstall -y \
    pyOpenSSL \
    kfserving \
    fastai \
    && python3 -m pip install --no-cache-dir -U \
    kfp~=1.8.14 \
    kfp-server-api \
    kserve~=0.8.0
RUN python3 -m pip install --no-cache-dir -U \
    albumentations \
    black \
    torch~=1.12.1 \
    pytorch-lightning[extra]~=1.7.6 \
    torchvision \
    torchaudio \
    torchtext \
    torchmetrics~=0.10.0 \
    tokenizers \
    transformers~=4.21.2 \
    datasets \
    decord \
    fiftyone \
    git+https://github.com/kpu/kenlm.git \
    gradio \
    h5py \
    imutils \
    isort \
    jupyterlab \
    jupyterlab-code-formatter \
    nemo_toolkit[asr,nlp]~=1.12.0 \
    nvidia-dali-cuda110 \
    pyctcdecode

RUN COMMAND="" \
    && for ext in $(code-server --list-extensions); do COMMAND+="--install-extension ${ext} --force "; done \
    && code-server ${COMMAND}
RUN code-server \
    --install-extension ms-python.python --force \
    --install-extension ms-python.vscode-pylance \
    --install-extension ms-python.black-formatter \
    --install-extension ms-python.isort \
    --install-extension sourcery.sourcery \
    --install-extension VisualStudioExptTeam.vscodeintellicode \
    --install-extension VisualStudioExptTeam.intellicode-api-usage-examples \
    --install-extension VisualStudioExptTeam.vscodeintellicode-completions \
    --install-extension k--kato.intellij-idea-keybindings \
    --install-extension yzhang.markdown-all-in-one \
    --install-extension esbenp.prettier-vscode \
    --install-extension vscodevim.vim \
    && code-server --list-extensions --show-versions

# s6 - 01-copy-tmp-home
USER root
RUN mkdir -p /tmp_home \
    && cp -r ${HOME} /tmp_home \
    && chown -R ${NB_USER}:users /tmp_home
USER ${NB_UID}

ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64

ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility
